#include "Constants.cginc"
#include "Perlin.cginc"

#pragma kernel RenderTextures
#pragma kernel RenderNormals

// 3 textures side by side:
// 
// y/r
// ^ ┌───┬───┬───┐
// | │ 0 │ 1 │ 2 │
// | └───┴───┴───┘
//   --> x/ang
RWTexture2D<float4> bTerrain_VertexTexturePair;
RWTexture2D<float4> bTerrain_NormalTexturePair;

//parameters
uint3 uTerrain_uvOfset;
float3 uTerrain_targetPos;
uint uTerrain_littleSectorCount;
uint uTerrain_radius;
float uTerrain_coveragePercent;
uint uTerrain_writeTargetSelect;//specifies, which part of bTerrain_VertexTexturePair to write to
float uTerrainHeightMap_amplitudeMul;
float uTerrainHeightMap_minorFreq;
float uTerrainHeightMap_verticesPerWave;
float uTerrainMountHeightMap_amplitudeMul;
float uTerrainMountHeightMap_minorFreq;
float uTerrainMountHeightMap_verticesPerWave;
float uTerrainMountMask_minorFreq;
float uTerrainMountMask_verticesPerWave;
float uTerrainMountMask_exponent;


float GetRadius(float uv_y)
{
	float angle = uv_y * (PI / 2.0 / (float)uTerrain_radius * uTerrain_coveragePercent);
	float maxAmplitude_half = 2 * uTerrainHeightMap_amplitudeMul;
	return (uTerrain_targetPos.y + maxAmplitude_half) * tan(angle);
}

//get vertex position. y will be 0
float3 GetVertexPos(uint2 uv, out float angle, out float radius)
{
	angle = uv.x * (TAU / (float)uTerrain_littleSectorCount);
	radius = GetRadius(uv.y);

	return float3(
		radius * cos(angle) + uTerrain_targetPos.x,
		0,
		radius * sin(angle) + uTerrain_targetPos.z
		);
}
float3 GetVertexPos(uint2 uv) {
	float ang, r;
	return GetVertexPos(uv, ang, r);
}

float RemapRange(float x, float2 origRange, float2 newRange)
{
	float range0to1 = (x - origRange.x) / (origRange.y - origRange.x);
	return newRange.x + range0to1 * (newRange.y - newRange.x);
}

float GetNoise(float2 pos, float maxFreq, float minorFreq, float amplitudeMul, int seed)
{
	float octaveCount = log2(maxFreq / minorFreq) + 1;
	octaveCount = max(1.001, octaveCount);

	return LayeredPerlin2D(pos, octaveCount, minorFreq, seed) * amplitudeMul;
}

float GetMaskNoise(float2 pos, float maxFreq, float minorFreq, float exponent, int seed)
{
	float noise = GetNoise(pos, maxFreq, minorFreq, 1, seed);
	noise = RemapRange(noise, float2(-2, 2), float2(0, 1));
	return pow(noise, exponent);
}

float GetHeight(float2 pos, float squareWidth)
{
	float plateauHeight = GetNoise(
		pos,
		squareWidth / uTerrainHeightMap_verticesPerWave,
		uTerrainHeightMap_minorFreq,
		uTerrainHeightMap_amplitudeMul,
		2983
	);

	float mountainHeight = GetNoise(
		pos,
		squareWidth / uTerrainMountHeightMap_verticesPerWave,
		uTerrainMountHeightMap_minorFreq,
		uTerrainMountHeightMap_amplitudeMul,
		9189
	) + uTerrainMountHeightMap_amplitudeMul;

	float mountainMask = GetMaskNoise(
		pos,
		squareWidth / uTerrainMountMask_verticesPerWave,
		uTerrainMountMask_minorFreq,
		uTerrainMountMask_exponent,
		1563
	);

	float height = lerp(plateauHeight, mountainHeight, mountainMask);
	return height;
}

[numthreads(8,8,1)]
void RenderTextures (uint3 uv : SV_DispatchThreadID)
{
	uv += uTerrain_uvOfset;

	//discard if out of bounds
	if (uv.x > uTerrain_littleSectorCount || uv.y > uTerrain_radius)
		return;

	//get vertex position (y = 0 for now)
	float vAngle, vRadius;
	float3 vertexPos = GetVertexPos(uv.xy, vAngle, vRadius);

	//calculate vertexPos.y
	float dr = GetRadius(uv.y + 1) - vRadius;//square width at vertexPos
	float squareWidth = 1 / dr;
	vertexPos.y = GetHeight(vertexPos.xz, squareWidth);
	
	//uv += uint3(uTerrain_writeTargetSelect * uTerrain_littleSectorCount, 0, 0);//select target
	bTerrain_VertexTexturePair[uv.xy] = float4(vertexPos, 0);
}


float3 GetNormal(uint2 uv)
{
	//calculate sample points for numerical partial derivatives
	float3 p00, p10, p01;
	if (uv.y != 0)//if not centre point
	{
		//prevent out of bounds errors
		uv -= uint2(uv.x >= uTerrain_littleSectorCount, 0);
		uv -= uint2(0, uv.y >= uTerrain_radius);

		p00 = (float3)bTerrain_VertexTexturePair[uv];
		p10 = (float3)bTerrain_VertexTexturePair[uv + uint2(1, 0)];
		p01 = (float3)bTerrain_VertexTexturePair[uv + uint2(0, 1)];

	}
	else//if centre point
	{
		p00 = (float3)bTerrain_VertexTexturePair[uint2(0, 0)];
		p10 = (float3)bTerrain_VertexTexturePair[uint2(uTerrain_littleSectorCount / 4, 1)];
		p01 = (float3)bTerrain_VertexTexturePair[uint2(0, 1)];
	}
	
	//numerical partial derivatives
	float3 ddx = p00 - p10;
	float3 ddy = p00 - p01;

	return normalize(cross(ddx, ddy));
}

[numthreads(8, 8, 1)]
void RenderNormals(uint3 uv : SV_DispatchThreadID)
{
	bTerrain_NormalTexturePair[uv.xy] = float4(GetNormal(uv.xy), 0);
}