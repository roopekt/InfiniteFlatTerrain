#include "Constants.cginc"
#include "Perlin.cginc"

#pragma kernel RenderTextures

// two textures side by side:
// 
// y/r
// ^ ┌───┬───┐
// | │ 0 │ 1 │
// | └───┴───┘
//   --> x/ang
RWTexture2D<float4> bTerrain_VertexTexturePair;

//parameters
float3 uTerrain_targetPos;
uint uTerrain_littleSectorCount;
uint uTerrain_radius;
float uTerrain_coveragePercent;
bool uTerrain_writeTargetSelect;//specifies, which part of bTerrain_VertexTexturePair to write to

float3 GetVertexPos(uint3 uv)
{
	float angleX = uv.x * (TAU / (float)uTerrain_littleSectorCount);

	float angleY = uv.y * (PI / 2.0 / (float)uTerrain_radius * uTerrain_coveragePercent);
	float radius = uTerrain_targetPos.y * tan(angleY);

	return float3(
			radius * cos(angleX) + uTerrain_targetPos.x,
			0,
			radius * sin(angleX) + uTerrain_targetPos.z
		);
}

float GetHeight(float2 pos)
{
	return LayeredPerlin2D(pos, 3, 1. / 40.) * 25;
}

[numthreads(8,8,1)]
void RenderTextures (uint3 uv : SV_DispatchThreadID)
{
	//discard if out of bounds
	if (uv.x > uTerrain_littleSectorCount || uv.y > uTerrain_radius)
		return;

	float3 vertexPos = GetVertexPos(uv);
	vertexPos += float3(0, GetHeight(vertexPos.xz), 0);

	//uv += uint3(uTerrain_writeTargetSelect * uTerrain_littleSectorCount, 0, 0);//select target
	bTerrain_VertexTexturePair[uv.xy] = float4(vertexPos, 0);
}